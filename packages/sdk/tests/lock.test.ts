import { NostrBindingSDK, TESTNET_CONFIGS } from '../src/index';
import { blockchain } from '@ckb-lumos/base';
import { bytes } from '@ckb-lumos/codec';

describe('Nostr Lock', () => {
  test('Build Lock Script', () => {
    const sdk = new NostrBindingSDK(TESTNET_CONFIGS);
    const nostrPublicKey = '0xadd6ba499ba1db706bc14a3bf180b26e44b641b3f657d92e5c35d18a3a219093';
    const nostrLockScript = sdk.lock.buildScript(nostrPublicKey);
    expect(sdk.lock.isNostrLock(nostrLockScript)).toBe(true);
  });

  test('Build CKB Address', () => {
    const sdk = new NostrBindingSDK(TESTNET_CONFIGS);
    const nostrPublicKey = '0x45c41f21e1cf715fa6d9ca20b8e002a574db7bb49e96ee89834c66dac5446b7a';
    const ckbAddress = sdk.lock.encodeToCKBAddress(nostrPublicKey);
    expect(ckbAddress).toEqual(
      'ckt1qp4wtmsvhzrm9h66ngvpxuc4hx7u2klg65nr0vk7qcjqjt2lpjga2qgqszfcwyycsu3g4dj4qyuwyedz8fru3w5m56t770',
    );
  });

  test('Parse CKB Address', () => {
    const sdk = new NostrBindingSDK(TESTNET_CONFIGS);
    const ckbAddress =
      'ckt1qp4wtmsvhzrm9h66ngvpxuc4hx7u2klg65nr0vk7qcjqjt2lpjga2qgqszfcwyycsu3g4dj4qyuwyedz8fru3w5m56t770';
    const nostrPublicKey = '0x45c41f21e1cf715fa6d9ca20b8e002a574db7bb49e96ee89834c66dac5446b7a';
    const pubkeyHash = sdk.lock.parseCBKAddressToNostrPubkeyHash(ckbAddress);
    expect(pubkeyHash).toEqual(sdk.lock.buildPubkeyScriptArgs(nostrPublicKey).slice(4));
  });

  test('Parse WitnessArgs', () => {
    const sdk = new NostrBindingSDK(TESTNET_CONFIGS);
    const witness =
      '0x6a0400001000000050020000500200003c0200007b226964223a2236613263313866666661353338643432313234323937396435373037303564316464336266626435613766623535353937336465386139303633363936663333222c227075626b6579223a2234356334316632316531636637313566613664396361323062386530303261353734646237626234396539366565383938333463363664616335343436623761222c22637265617465645f6174223a313731393538373834312c226b696e64223a32333333342c2274616773223a5b5b22636b625f736967686173685f616c6c222c2262383539333861323430643264323134333536613536666134393666646362323262613733373464313163346166326462373939393562343864356631386364225d5d2c22636f6e74656e74223a225369676e696e67206120434b42207472616e73616374696f6e5c6e5c6e494d504f5254414e543a20506c65617365207665726966792074686520696e7465677269747920616e642061757468656e746963697479206f6620636f6e6e6563746564204e6f73747220636c69656e74206265666f7265207369676e696e672074686973206d6573736167655c6e222c22736967223a223634616566646631653765313831656432626630343435666362313336363038613139666238383961613061666165333165356336333264343539356166396531303337613461646561383138363630633165663262636630666462643637663331303064636338383731376634313838643734356632303436343761656530227d160200007b226964223a2230303263393862306433353164366263366666643231323430396232333865643963303631303630323265303431633335316661343332366266643133316663222c227075626b6579223a2234356334316632316531636637313566613664396361323062386530303261353734646237626234396539366565383938333463363664616335343436623761222c22637265617465645f6174223a313731393538373833382c226b696e64223a312c2274616773223a5b5b22636b625f676c6f62616c5f756e697175655f6964222c2238316130356563393033653866613230333932653766633138313566653036633137643135346532393066623562333339646232336562336531373164376431225d2c5b226e6f6e6365222c2231303435222c223130225d5d2c22636f6e74656e74223a22546869732069732061206b696e642d312073686f7274206e6f74652c20697420697320616c736f2061204e6f6e2046756e6769626c6520546f6b656e206f6e20434b4220626c6f636b636861696e2e222c22736967223a223762343130363766613031333230316139376137366335656338313861343638636439633332323133346362613432363832313837383430656334373933323935633965356463373932623231306439326438643236316137666362383063653535376434303231663535343966626638313462646165343439303137663865227d';
    const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));
    const event = sdk.lock.parseUnlockEventFromWitnessArgs(witnessArgs);
    expect(event?.id.toHex()).toBe('6a2c18fffa538d421242979d570705d1dd3bfbd5a7fb555973de8a9063696f33');
  });
});
